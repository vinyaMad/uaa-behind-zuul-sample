spring:
  application:
    name: uaa-service

# Define the port where the UAA server would be running
server:
  port: 8769
  # Use different context-path to avoid session cookie overlapping
  context-path: /uaa
  use-forward-headers: false

# Define the Eureka server that handles service registration
eureka:
  instance:
      hostname: localhost
      port: 8761
  client:
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${eureka.instance.port}/eureka/

# Define security
security:
<<<<<<< master
  oauth2:
    client:
      client-id: acme
      client-secret: acmesecret
      scope: read,write
      auto-approve-scopes: '.*'

facebook:
  client:
    clientId: 233668646673605
    clientSecret: 33b17e044ee6a4fa383f46ec6e28ea1d
    accessTokenUri: https://graph.facebook.com/oauth/access_token
    userAuthorizationUri: https://www.facebook.com/dialog/oauth
    tokenName: oauth_token
    authenticationScheme: query
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://graph.facebook.com/me
google:
  client:
    clientId: <your client ID>
    clientSecret: <your client secret>
    accessTokenUri: https://www.googleapis.com/oauth2/v3/token
    userAuthorizationUri: https://accounts.google.com/o/oauth2/auth
    clientAuthenticationScheme: form
    scope: profile email
  resource:
    userInfoUri: https://www.googleapis.com/plus/v1/people/me
    preferTokenInfo: false
=======
  basic:
    enabled: false
  user:
    password: password
  ignored: /css/**,/js/**,/favicon.ico,/webjars/**
>>>>>>> 0526111 Oauth2 with external server behind zuul

logging:
  level.org.springframework.security: DEBUG

---
spring:
  profiles: docker

server:
  port: ${SERVICE_PORT}

eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: ${REGISTRY_URL}
